import tensorflow as tf
import numpy as np

"""
-*- coding: utf-8 -*- 
@Project: disk_failure_prediction
@Description: 一级健康度预测
@Time : 2021/5/24 16:19
@Author : cao jian
"""

# Parameters
n_input = 9
n_steps = 20
n_hidden = 128
n_classes = 6
# classes = ["R1", "R2", "R3", "R4", "R5", "R6"]
classes = [1, 2, 3, 4, 5, 6]

# Define weights
weights = {
    'in': tf.Variable(tf.random_uniform([n_input, n_hidden])),
    'out': tf.Variable(tf.random.normal([n_hidden, n_classes])),
}
biases = {
    'in': tf.Variable(tf.random_uniform([n_hidden])),
    'out': tf.Variable(tf.random.normal([n_classes])),
}


def mulitGRU(x):
    x = tf.unstack(x, num=n_steps, axis=1)

    # 可以看做3个隐藏层
    stacked_rnn = []
    for i in range(2):
        stacked_rnn.append(tf.contrib.rnn.GRUCell(num_units=n_hidden))

        # 多层RNN的实现 例如cells=[cell1,cell2]，则表示一共有两层，数据经过cell1后还要经过cell2
    grucell = tf.contrib.rnn.MultiRNNCell(cells=stacked_rnn)
    # 静态rnn函数传入的是一个张量list  每一个元素都是一个(batch_size,n_input)大小的张量
    outputs, states = tf.contrib.rnn.static_rnn(cell=grucell, inputs=x, dtype=tf.float32)

    # 输出层
    outputs = outputs[-1]
    output = tf.matmul(outputs, weights['out']) + biases['out']
    return output


def predict_1st(smart_data, smart_id):
    # 将SAMRT数据按照训练集同样的方式裁剪选择九个特征：1、3、4、9、12、192、193、194、197
    # 根据提前准备好的训练集中最大最小值进行数据归一化
    smart_data = smart_data.astype(np.float32)
    smart_max = [3831944120, 651, 189, 53792, 188, 5885, 5885, 50, 421]
    smart_min = [0, 0, 3, 10, 3, 3, 3, 18, 0]
    for i in range(len(smart_max)):
        for j in range(smart_data.shape[1]):
            if smart_data[0][j][i] >= smart_max[i]:
                smart_data[0][j][i] = 1
            elif smart_data[0][j][i] <= smart_min[i]:
                smart_data[0][j][i] = 0
            else:
                smart_data[0][j][i] = float((smart_data[0][j][i] - smart_min[i]) / (smart_max[i] - smart_min[i]))
    print(smart_data)

    # 数据通过GRU网络计算
    x = tf.compat.v1.placeholder(dtype=tf.float32, shape=[None, 20, 9])
    pred = mulitGRU(x)

    saver = tf.compat.v1.train.Saver(tf.compat.v1.global_variables(), max_to_keep=15)
    with tf.Session() as sess:
        sess.run(tf.global_variables_initializer())
        # 先加载图和参数变量
        # saver = tf.train.import_meta_graph('./model/hdd_GRU_model.ckpt.meta')  # 不能加这一步
        saver.restore(sess, tf.train.latest_checkpoint('./model/'))

        prediction = sess.run(pred, feed_dict={x: smart_data})
        print(prediction)
        # print(prediction.shape)  # 结果是二维数组
        print(np.max(prediction, axis=1))  # 概率最大的健康度预测结果
        for i in range(len(prediction[0])):
            if prediction[0][i] == np.max(prediction, axis=1):
                print(classes[i])


# 预测数据
pre1 = [[0, 645, 52, 45795, 52, 1342, 1342, 31, 2], [2, 645, 52, 45819, 52, 1343, 1343, 31, 2], [0, 645, 52, 45842, 52, 1344, 1344, 31, 2],
        [65536, 645, 52, 45867, 52, 1345, 1345, 31, 2], [65536, 645, 52, 45891, 52, 1345, 1345, 31, 2], [131072, 645, 52, 45914, 52, 1346, 1346, 31, 2],
        [1, 645, 52, 45939, 52, 1347, 1347, 31, 2], [1, 645, 52, 45963, 52, 1347, 1347, 31, 2], [0, 645, 52, 45986, 52, 1348, 1348, 31, 2],
        [65536, 645, 52, 46010, 52, 1349, 1349, 31, 2], [65537, 645, 52, 46035, 52, 1349, 1349, 31, 2], [0, 645, 52, 46059, 52, 1350, 1350, 31, 2],
        [0, 645, 52, 46082, 52, 1351, 1351, 31, 2], [65536, 645, 52, 46106, 52, 1352, 1352, 31, 2], [65536, 645, 52, 46131, 52, 1353, 1353, 31, 2],
        [0, 645, 52, 46154, 52, 1354, 1354, 31, 2], [0, 645, 52, 46178, 52, 1355, 1355, 31, 2], [131074, 645, 52, 46203, 52, 1355, 1355, 31, 2],
        [131072, 645, 52, 46226, 52, 1356, 1356, 31, 2], [65538, 645, 52, 46250, 52, 1357, 1357, 31, 2]]  # R1
pre2 = [[0, 634, 17, 48089, 17, 917, 917, 5, 0], [65536, 634, 17, 48113, 17, 917, 917, 5, 0], [0, 634, 17, 48137, 17, 918, 918, 5, 0],
        [0, 634, 17, 48161, 17, 918, 918, 5, 0], [0, 634, 17, 48185, 17, 919, 919, 6, 0], [0, 634, 17, 48209, 17, 920, 920, 6, 0],
        [0, 634, 17, 48234, 17, 921, 921, 6, 0], [65536, 634, 17, 48257, 17, 922, 922, 6, 0], [0, 634, 17, 48281, 17, 922, 922, 6, 0],
        [0, 634, 17, 48305, 17, 922, 922, 6, 0], [65536, 634, 17, 48329, 17, 923, 923, 6, 0], [0, 634, 17, 48353, 17, 924, 924, 6, 0],
        [0, 634, 17, 48377, 17, 925, 925, 6, 0], [0, 634, 17, 48401, 17, 925, 925, 6, 0], [1, 634, 17, 48425, 17, 926, 926, 6, 0],
        [0, 634, 17, 48449, 17, 927, 927, 6, 0], [0, 634, 17, 48473, 17, 927, 927, 6, 0], [1, 634, 17, 48497, 17, 927, 927, 6, 0],
        [0, 634, 17, 48521, 17, 928, 928, 6, 0], [0, 634, 17, 48545, 17, 929, 929, 6, 0]]  # R2
pre3 = [[2359296, 625, 17, 28909, 17, 638, 638, 1442, 0], [0, 625, 17, 28933, 17, 639, 639, 1442, 0], [262146, 625, 17, 28957, 17, 639, 639, 1442, 0],
        [0, 625, 17, 28981, 17, 640, 640, 1442, 0], [0, 625, 17, 29004, 17, 641, 641, 1442, 0], [1, 625, 17, 29029, 17, 642, 642, 1442, 0],
        [0, 625, 17, 29053, 17, 643, 643, 1442, 0], [2, 625, 17, 29076, 17, 643, 643, 1442, 0], [0, 625, 17, 29101, 17, 644, 644, 1442, 0],
        [0, 625, 17, 29125, 17, 644, 644, 1442, 0], [0, 625, 17, 29149, 17, 645, 645, 1442, 0], [0, 625, 17, 29173, 17, 645, 645, 1442, 0],
        [0, 625, 17, 29197, 17, 646, 646, 1442, 0], [0, 625, 17, 29221, 17, 647, 647, 1442, 0], [0, 625, 17, 29245, 17, 647, 647, 1442, 0],
        [0, 625, 17, 29269, 17, 648, 648, 1442, 0], [0, 625, 17, 29293, 17, 649, 649, 1442, 0], [65536, 625, 17, 29316, 17, 649, 649, 1442, 0],
        [0, 625, 17, 29341, 17, 650, 650, 1442, 0], [3, 625, 17, 29365, 17, 651, 651, 1442, 0]]  # R3
pre4 = [[1179686, 617, 12, 33803, 12, 764, 764, 1275, 8], [2359320, 617, 12, 33826, 12, 764, 764, 1275, 8], [3145743, 617, 12, 33850, 12, 765, 765, 1275, 8],
        [2162727, 617, 12, 33875, 12, 765, 765, 1275, 8], [2621453, 617, 12, 33898, 12, 766, 766, 1275, 8], [1310741, 617, 12, 33922, 12, 766, 766, 1275, 8],
        [1048608, 617, 12, 33947, 12, 767, 767, 1275, 8], [1048617, 617, 12, 33971, 12, 767, 767, 1275, 8], [2490402, 617, 12, 33994, 12, 768, 768, 1275, 8],
        [3473449, 617, 12, 34018, 12, 768, 768, 1275, 8], [3014683, 617, 12, 34043, 12, 769, 769, 1275, 8], [3473442, 617, 12, 34066, 12, 770, 770, 1275, 8],
        [4128769, 617, 12, 34090, 12, 771, 771, 1275, 8], [2949165, 617, 12, 34115, 12, 771, 771, 1275, 8], [1114145, 617, 12, 34139, 12, 772, 772, 1275, 8],
        [3473446, 617, 12, 34162, 12, 772, 772, 1275, 8], [3997755, 617, 12, 34186, 12, 773, 773, 1276, 8], [2424867, 617, 12, 34211, 12, 773, 773, 1276, 8],
        [1376355, 617, 12, 34234, 12, 774, 774, 1276, 8], [7077991, 617, 12, 34258, 12, 774, 774, 1276, 8]]  # R4
pre5 = [[0, 625, 18, 41390, 18, 1137, 1137, 0, 0], [0, 625, 18, 41414, 18, 1138, 1138, 0, 0], [0, 625, 18, 41438, 18, 1139, 1139, 0, 0],
        [0, 625, 18, 41463, 18, 1139, 1139, 0, 0], [0, 625, 18, 41486, 18, 1140, 1140, 0, 0], [0, 625, 18, 41510, 18, 1141, 1141, 0, 0],
        [0, 625, 18, 41535, 18, 1142, 1142, 0, 0], [0, 625, 18, 41558, 18, 1143, 1143, 0, 0], [0, 625, 18, 41582, 18, 1143, 1143, 0, 0],
        [0, 625, 18, 41607, 18, 1144, 1144, 0, 0], [0, 625, 18, 41630, 18, 1145, 1145, 0, 0], [0, 625, 18, 41654, 18, 1146, 1146, 0, 0],
        [0, 625, 18, 41678, 18, 1147, 1147, 0, 0], [0, 625, 18, 41702, 18, 1147, 1147, 0, 0], [0, 625, 18, 41726, 18, 1148, 1148, 0, 0],
        [0, 625, 18, 41750, 18, 1149, 1149, 0, 0], [0, 625, 18, 41775, 18, 1150, 1150, 0, 0], [0, 625, 18, 41798, 18, 1151, 1151, 0, 0],
        [0, 625, 18, 41822, 18, 1152, 1152, 0, 0], [0, 625, 18, 41847, 18, 1153, 1153, 0, 0]]  # R5
pre6 = [[0, 625, 17, 35365, 17, 926, 926, 0, 0], [0, 625, 17, 35390, 17, 927, 927, 0, 0], [0, 625, 17, 35414, 17, 928, 928, 0, 0],
        [0, 625, 17, 35437, 17, 929, 929, 0, 0], [0, 625, 17, 35461, 17, 929, 929, 0, 0], [0, 625, 17, 35486, 17, 930, 930, 0, 0],
        [0, 625, 17, 35509, 17, 931, 931, 0, 0], [0, 625, 17, 35533, 17, 932, 932, 0, 0], [0, 625, 17, 35558, 17, 933, 933, 0, 0],
        [0, 625, 17, 35581, 17, 934, 934, 0, 0], [0, 625, 17, 35605, 17, 934, 934, 0, 0], [0, 625, 17, 35629, 17, 935, 935, 0, 0],
        [0, 625, 17, 35654, 17, 936, 936, 0, 0], [0, 625, 17, 35677, 17, 937, 937, 0, 0], [0, 625, 17, 35701, 17, 938, 938, 0, 0],
        [0, 625, 17, 35726, 17, 939, 939, 0, 0], [0, 625, 17, 35749, 17, 940, 940, 0, 0], [0, 625, 17, 35773, 17, 941, 941, 0, 0],
        [0, 625, 17, 35798, 17, 942, 942, 0, 0], [0, 625, 17, 35821, 17, 942, 942, 0, 0]]  # R6

# pre1 = np.array(pre1)
# pre1 = pre1[np.newaxis, :, :]
# predict_1st(pre1)
# predict(pre2)
pre3 = np.array(pre3)
pre3 = pre3[np.newaxis, :, :]
predict_1st(pre3, "")
# predict(pre4)
# predict(pre5)
# pre6 = np.array(pre6)
# pre6 = pre6[np.newaxis, :, :]
# predict_1st(pre6)

# 1st
# max 3831944120 min 0
# max 194 min 0
# max 651 min 0
# max 189 min 3
# max 1976 min 0
# max 327680 min 0
# max 75 min 0
# max 53792 min 10
# max 1638425 min 0
# max 188 min 3
# max 5885 min 3
# max 5885 min 3
# max 50 min 18
# max 2086 min 0
# max 421 min 0
# max 4 min 0
# max 19822 min 0



